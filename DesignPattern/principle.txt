1.开闭原则（Open-Closed Princinple, OCP）
    软件实体对扩展是开放的，但对修改是关闭的，即不能再修改一个软件实体的基础上去扩展其功能。
2.依赖倒转原则（Dependency Inversion Principle, DIP）
    要针对抽象编程而不要针对具体编程
3.合成复用原则（Composite Reuse Principle, CRP）
    该原则是设计模式的核心思想，在系统中尽力多使用组合和聚合关联关系，尽量少使用甚至不使用继承关系
4.单一职责原则（Single Responsibility Principle,SRP）
    类的职责要单一，不能将太多的职责放在一个类中
5.迪米特法则（Law of Demeter, LoD）
    一个软件实体对其它实体的引用越少越好，或者说如果两个不必此直接通信，那么这两个类就不应当发生直接的相互作用，
    而是通过引入一个第三者发生间接交互。即只与朋友说话不与陌生人通信。
    
    朋友的范围：
    1）当前对象本身
    2）以参数形式传入当前对象方法中的对象
    3）当前对象的成员对象
    4）当前对象成员是一个集合，那么集合中的每个元素也是朋友
    5）当前对象创建的对象。
6.里氏代换原则（Liskov Substitution Principle, LSP）
    在软件系统中，一个可以接受基类对象的方法必然可以接受一个子类对象
7.接口隔离原则（Interface Segregation Principle, ISP）
    使用多个专门的接口来取代一个统一的接口
    
