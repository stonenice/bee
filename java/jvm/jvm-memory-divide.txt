内存模型：可以理解为在特定的操作协议下，对特定的内存或高速缓存进行读写访问的过程抽象


JVM内存划分:
----------------- JVM Memory Divide ------------------------
-                                                          -
-     方法区(Method Area)[常量池]    堆(Heap)              -
-                                                          -
-     虚拟机栈(VM Stack)             计数寄存区            -
-     [本地方法栈]            (Program Counter Register)   -
-                                                          -
------------------------------------------------------------

1.计数寄存区（Program Counter Register）
计数寄存区是一块较小的内存区域，用于记录线程所执行字节码的行号。该内存区域为线程私有，如果线程
正在执行Java的方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址。如果正在执行的是Native
方法，则计数器的值为空。该区域是JVM中唯一不会出现OutOfMemeryError情况的区域。

2.虚拟机栈（VM Stack）
虚拟机栈描述的是Java线程和方法执行的内存模型：每个方法执行的同时都会创建一个栈帧(Stack Frame)用于存储
局部变量表、操作数栈、动态链接、方法出口等信息。该内存区域为线程私有。由于JVM规范中没有对本地方
法栈强制规定，所有在HotSpot VM中直接把本地方法栈和虚拟栈合二为一。本地方法栈用于服务Native方法。
虚拟机栈和本地方法栈都会抛出StackOverflowError和OutOfMemoryError。如果线程请求的栈深度大于虚拟
机所允许的深度（递归，线程树），将抛出StackOverflowError异常，如果虚拟机栈内存扩展时无法申请到足够的内存时就会
抛出OutOfMemoryError异常。

3.堆（Heap）
堆是虚拟机中内存最大的一块，也是垃圾收集管理的主要区域。该内存区域的作用就是存放对象实例，虚拟机启动时就创建
并被所有线程共享。如果在堆中没有内存完成实例分配，并且堆也无法再扩展式将会抛出OutOfMemoryError异常.

4.方法区(Method Area)
方法区用于存储已被加载（ClassLoader）的类信息、常量、静态变量、JIT编译后的代码等数据。也可理解为字节码在虚拟机
中的存放地点，反射技术可能就需要使用到该区域。方法区被各线程共享。方法区中还有一个常量池，除了保存类文件中描述
的符号引用外，还会把翻译出来的直接引用存在常量池中。运行期间也可将新的常量放入池中，如String类的intern方法等。
常量池是方法区的一部分，受到方法区内存的限制，当常量池无法申请到内存时会抛出OutOfMemoryError异常。

