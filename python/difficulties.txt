自学Python过程中对于理解比较困难的难点
提示:在运行文中的程序时，若出现错误多半是由于编码问题，
只需将代码中的中文注释去掉即可

1.*与**的作用
在python中经常会在在函数定义和参数传递时看到*与**, 经过学习可能对于在函数定以的用法能够理解，但在参数传递时确难于理解。
下面我会写出我对这种语法的理解：
1）在函数定义时使用*与**表示函数接受有名和无名的可变参数，可以理解成C语言中的...或PHP中的默认参数。在理解上可以认为将
未定义但在运行时传入的实参存入*表示的形参中，实际上此时的形参就是一个元组（Tuple）。带有键的实参（sex='man'）则存入**
表示的形参中，所有的带键的参数都以字典的形式存入。由上可知，所有可变的参数中不是以键值对传入的参数都可以在*表示的元组
中取得，键值对的参数都能在**表是的字典中取得。具体如下例：

#只能接受定义过的参数，不能接受可变参数，即普通函数
def add(a,b):
    return a+b
    
print add(2,3)   # Right
print add(2,3,4) # Wrong

#能接受多个可变参数，但只能接受无键的参数
def add(a,b,*args):
    if len(args)>0:
        c=a+b
        for x in args:
            c=c+x
        return c
    else:
        return a+b

print add(2,3)   # Right
print add(2,3,4) # Right
print add(2,3,4,mode=False) # Wrong

#能接受有键或无键的可变参数
def add(a,b,*args,**kwargs):
    s=2
    c=a+b
    if len(args)>0:
        for x in args:
            c=c+x
        s=s+len(args)
    if 'mode' in kwargs and kwargs['mode']==True:
        return c/s
    else:
        return c

print add(2,3)   # Right
print add(2,3,4) # Right
print add(2,3,4,mode=True) # Right

2)在参数传递时使用*表示将一个可迭代的对象映射为函数的参数列表，而**则表示将一个可迭代对象映射为函数的有键参数列表。
在python的常见类型中可迭代的类型有字符串，列表，元祖和字典，因此可以将这些类型的变量映射为函数的参数。通常对这个概
念没有理解透彻的人就以为只有这几种类型可以，实际上是只要是可迭代的对象都是可以的，包括自己定义的类，只要你实现的迭
代的接口都可以，以下是例子：

#define user's class which is iteratorable
class myargs:
    def __init__(self):
        self.data=[2,3]
        self.index=0
    def __iter__(self):
        return self
    def next(self):
        if self.index>=len(self.data):
            raise StopIteration
        v=self.data[self.index]
        self.index=self.index+1
        return v
        

arg_str='23'
arg_tuple=(2,3)
arg_list=[2,3]
arg_dict={0:2,1:3}
arg_cls=myargs()



#calculate the sum
#don't accept dict and string
def add(a,b):
    return a+b

print add(2,3) # Right
print add(*arg_str) # Wrong because of character
print add(*arg_tuple) #Right
print add(*arg_list) #Right
print add(*arg_dict) # Wrong
print add(**arg_dict) # Wrong
print add(*arg_cls) # Right

#calculate the sum
#accept anything
def add(a,b,**kwargs):
    c=int(a)+int(b)
    if len(kwargs)>0:
        for k,v in kwargs:
            c=c+int(v)
    return c
    
print add(2,3) # Right
print add(*arg_str) # Right
print add(*arg_tuple) #Right
print add(*arg_list) #Right
print add(*arg_dict) # Right
print add(**arg_dict) # Right
print add(*arg_cls) # Right

2.元类(metaclass)的理解
元类的概念在很多语言中都存在尤其在具有一切皆对象的编程语言中，例如Objective-c和Ruby。Python中对于元类的理解意味
着你对Python的深度。那么什么元类，直白的理解元类就是创建类的类。在Python中类(class)也可以看成是一个对象，而它的
类型是type。由此我们定义一个类可以通过两种方式实现，一种是使用class关键字定义，另一种是使用函数type(class_name,
class_bases,class_attrs)创建。实际上Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，也是调用type()
函数创建出class。type制定了解释器如何创建一个类，因此type和派生自type的类就叫做元类。Python的类中有个__metaclass__
的属性，该属性指明了该类的元类是那个。在定义类是解释器会默认设置类的元类，因此如果我们想改变类如何创建，我们其实
可以通过改变__metaclass__指定的元类即可。

#方法1：使用关键字class定义类
class person:
    def __init_(self,name):
         self.name=name
         
    def sayname(self):
        print self.name
        
#实例化一个对象p
p=person('stone')
p.sayname()

#方法2：使用type创建类
def constructor(memery,name):
    memery.name=name
    
def printfrom(memery):
    print memery.name
    
class_name='person' #类名
class_bases=()      #继承类列表
class_attrs={'__init__':constructor,'sayname':printfrom} #类方法注册字典
person=type(class_name,class_bases,class_attrs)

#实例化一个对象p
p=person('stone')
p.sayname()

#定义自己的元类，即继承type类
#该元类的行为是控制类的创建对象只能是单列
class Singleton(type):
    def __init__(self,name,extends,methods):
        super(Singleton,self).__init__(name,extends,methods)
        self.instance=None
        
    def __call__(self, *args, **kwargs):
        if self.instance is None:
            self.instance=super(Singleton,self).__call__(*args, **kwargs)
        return self.instance
        
class DBManager(object):
    __metaclass__=Singleton
    
#两次创建的对象其实是同一个对象
print DBManager()
print DBManager()
