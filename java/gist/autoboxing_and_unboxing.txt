Java的数据类型分为基本类型与引用类型两大类，基本数据类型有:short, int, long, char, byte, boolean, float, double共8种基本类型。
Java中每种基本类型都有对应的引用类型：Short, Integer, Long, Character, Byte, Boolean, Float, Double。其与基本数据类型的区别主
要在引用类型不仅定义了数据的结构还定义了数据的操作。

由于Java是一门面向对象的编程语言，因此对数据的处理会以对象的方式去处理（List<T>的元素必须是引用类型）。这就存在基本数据类型
与引用类型之间的转化，在Java中称这两个过程为装箱与拆箱，且两个过程由系统自动完成。

装箱：将基本数据类型转化为其对应的引用类型，如int -> Integer，char -> Character.

拆箱：和装箱相反，将引用类型的对象简化成值类型的数据.

基本类型与引用类型的比较：
int a=120;
Integer b=new Integer(120);

boolean f1=(a==b);    //false
boolean f2=(b.equals(a));    //true

从变量对应值的类型去划分，基本数据又可以被称为值类型。因为变量的值就是数据本身，而引用类型变量的值仅仅是指向存储数据的指针。
按上面的理解，Java的数据类型也可以分为值类型(基本数据类型)与引用类型。

[值类型]
也就是基本数据类型 基本数据类型常被称为四类八种
四类：  
1，整型 2，浮点型 3，字符型4，逻辑型
八种：   
1，整型3种 byte，short，int，long
2，浮点型2种 float，double
3，字符型1种 char
4，逻辑型1种 boolean

[引用类型]
除了四类八种基本类型外，所有的类型都称为引用类型（数组，类，接口，字符串），在弄清楚值类型与引用类型之,最后一点就是
值传递与引用传递,这才是关键

[值传递]    
基本数据类型赋值都属于值传递,值传递传递的是实实在在的变量值,是传递原参数的拷,值传递后，实参传递给形参的值，
形参发生改变而不影响实参。

[引用传递]
引用类型之间赋值属于引用传递。引用传递传递的是对象的引用地址,也就是它的本身(自己最通俗的理解)。
引用传递：传的是地址，就是将实参的地址传递给形参，形参改变了，实参当然被改变了，因为他们指向相同的地址。
引用和我们的指针差不多,但是它不又不需要我们去具体的操作

 [内存分配]
一个具有值类型（value type）的数据存放在栈内的一个变量中。即是在栈中分配内存空间，直接存储所包含的值，其值就代表数据本身。
值类型的数据具有较快的存取速度。
一个具有引用类型（reference type）的数据并不驻留在栈中，而是存储于堆中。即是在堆中分配内存空间，不直接存储所包含的值，
而是指向所要存储的值，其值代表的是所指向的地址。当访问一个具有引用类型的数据时，需要到栈中检查变量的内容，该变量引用堆
中的一个实际数据。引用类型的数据比值类型的数据具有更大的存储规模和较低的访问速度。

Java中有垃圾回收机制，栈内存中的变量随着方法的结束内存自然销毁了，而用引用类型的时候，当方法结束的时候，这个对象可能被
另一个引用类型所应用，不会销毁，只有当一个对象没有任何引用变量引用的时候，垃圾回收机制才会回收

